TDAT: private void bfs ( int from ) {  <NL>  <NL> list < integer > q = new linked list < integer > ( ) ;  <NL> int u , du ;  <NL>  <NL> q . add ( from ) ;  <NL> q . add ( 0 ) ;  <NL> if ( d ! = null ) d [ from ] = 0 ;  <NL>  <NL> color [ from ] = grey ;  <NL>  <NL> while ( ! q . is empty ( ) )  <NL>  {  <NL> u = q . remove ( 0 ) . int value ( ) ;  <NL> du = q . remove ( 0 ) . int value ( ) ;  <NL>  <NL> for ( int j : g . get neighbours ( u ) )  <NL>  {  <NL> if ( color [ j ] = = white )  <NL>  {  <NL> color [ j ] = grey ;  <NL>  <NL> q . add ( j ) ;  <NL> q . add ( du + 1 ) ;  <NL> if ( d ! = null ) d [ j ] = du + 1 ;  <NL>  }  <NL> else <NL>  {  <NL> if ( color [ j ] < 0 )  <NL> cluster . add ( color [ j ] ) ;  <NL>  }  <NL>  }  <NL> color [ u ] = black ;  <NL>  }  <NL>  }  COM: <s> collects nodes accessible from node from using breadth first search </s>