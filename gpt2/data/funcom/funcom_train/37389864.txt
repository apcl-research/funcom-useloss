TDAT: public void visit string literal ( j string literal self ) {  <NL> string buffer s = new string buffer ( ) ;  <NL> for ( int i = 0 ; i < self . value . length ( ) ; i + + ) {  <NL> char c = self . value . char at ( i ) ;  <NL> switch ( c ) {  <NL> case ' \n ' :  <NL> s . append ( " \\n " ) ;  <NL> break ;  <NL> case ' \r ' :  <NL> s . append ( " \\r " ) ;  <NL> break ;  <NL> case ' \t ' :  <NL> s . append ( " \\t " ) ;  <NL> break ;  <NL> case ' \b ' :  <NL> s . append ( " \\b " ) ;  <NL> break ;  <NL> case ' \f ' :  <NL> s . append ( " \\f " ) ;  <NL> break ;  <NL> case ' \ " ' :  <NL> s . append ( " \\\ " " ) ;  <NL> break ;  <NL> case ' \ ' ' :  <NL> s . append ( " \\\ ' " ) ;  <NL> break ;  <NL> case ' \\ ' :  <NL> s . append ( " \\\\ " ) ;  <NL> break ;  <NL> default :  <NL> s . append ( c ) ;  <NL>  }  <NL>  }  <NL> print ( ' " ' + s . to string ( ) + ' " ' ) ;  <NL>  }  COM: <s> prints a string literal </s>