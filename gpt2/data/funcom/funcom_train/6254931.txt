TDAT: private boolean check open ( ) throws io exception {  <NL> synchronized ( state lock ) {  <NL> if ( aborted ) {  <NL> throw new io exception ( " request aborted " ) ;  <NL>  }  <NL> switch ( in state ) {  <NL> case open :  <NL> return true ;  <NL> case eof :  <NL> return false ;  <NL> case closed :  <NL> throw new io exception ( " stream closed " ) ;  <NL> case invalid :  <NL> throw in exception ;  <NL>  }  <NL> in state = open ;  <NL>  }  <NL> try {  <NL> if ( start input ( ) ) {  <NL> return true ;  <NL>  } else {  <NL> end input ( ) ;  <NL> synchronized ( state lock ) {  <NL> in state = eof ;  <NL> if ( out state > = closed ) {  <NL> done ( out state = = invalid ) ;  <NL>  }  <NL>  }  <NL> return false ;  <NL>  }  <NL>  } catch ( throwable th ) {  <NL> invalidate ( th ) ;  <NL> throw new internal error ( ) ; / / unreached <NL>  }  <NL>  }  COM: <s> checks to make sure stream is open and start input has been called </s>