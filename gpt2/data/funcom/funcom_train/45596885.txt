TDAT: public void delete node downwards ( hashtable layouts , layer state node node , layer state node root ) {  <NL>  <NL>  / / go down to bottom , when return from all children clear all children edges <NL> state edge edge ;  <NL>  <NL> for ( int i = 0 ; i < node . children states . size ( ) ; i + + ) {  <NL> edge = node . children states . get ( i ) ;  <NL> delete node downwards ( layouts , edge . child state , root ) ;  <NL>  }  <NL>  <NL>  / / clear all children as comming back <NL> node . children states . clear ( ) ;  <NL>  <NL> if ( ! node . equals ( root ) ) {  <NL>  / / remove it for parent , at the moment only one parent possible <NL> node . parent . children states . remove ( node ) ;  <NL>  / / remove the layout <NL> layouts . remove ( node . squares ) ;  <NL>  }  <NL>  }  COM: <s> the function receives a node and then recursively deletes </s>