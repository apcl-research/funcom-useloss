TDAT: public gap list part ( long start , long end ) {  <NL> long size = 0 ;  <NL> gap range = new gap ( start , end ) ;  <NL> gap list result = new gap list ( ) ;  <NL> array list < gap > n gaps = new array list < gap > ( ) ;  <NL> for ( gap gap : gaps ) {  <NL> if ( gap . intersects ( range ) ) {  <NL> gap n gap = gap . intersect ( range ) ;  <NL> n gaps . add ( n gap ) ;  <NL> size + = n gap . size ( ) ;  <NL>  }  <NL>  }  <NL> result . set gaps ( n gaps ) ;  <NL> result . byte size ( size ) ;  <NL> return result ;  <NL>  }  COM: <s> returns a new gap list only with gaps covering the selected range </s>