TDAT: public object next ( ) {  <NL> object next = gray . pop ( ) ;  <NL> list adj = graph . get adjacent nodes ( next , edge type . all ) ;  <NL> for ( int i = adj . size ( ) - 1 ; i > = 0 ; i - - ) {  <NL> object node = adj . get ( i ) ;  <NL> if ( gray . contains ( node ) ) {  <NL> classifications . put ( node , edge classification . back _ edge ) ;  <NL>  } else if ( white . contains ( node ) ) {  <NL> gray . push ( node ) ;  <NL> white . remove ( node ) ;  <NL> classifications . put ( node , edge classification . tree _ edge ) ;  <NL>  } else {  <NL> classifications . put ( node , edge classification . forward _ edge ) ;  <NL>  }  <NL>  }  <NL> return next ;  <NL>  }  COM: <s> fully explore and return the next node in the graph </s>