TDAT: private void perform unary op ( short instr , int source ) {  <NL>  <NL> switch ( instr ) {  <NL> case inc :  <NL> set flags ( + + registers [ source ] ) ;  <NL> break ;  <NL> case dec :  <NL> set flags ( - - registers [ source ] ) ;  <NL> break ;  <NL> case not :  <NL> set flags ( registers [ source ] = ~ registers [ source ] ) ;  <NL> break ;  <NL> case get :  <NL> environment env = env mgr . env ( ) ;  <NL> registers [ source ] = env . get props ( ) . get input data ( ) ;  <NL> env . bio event performed ( new interaction event ( bearer , false , registers [ source ] ) ) ;  <NL> break ;  <NL> case put :  <NL> env mgr . env ( ) . bio event performed ( new interaction event ( bearer , true , registers [ source ] ) ) ;  <NL> break ;  <NL> case push :  <NL> stack [ active stack ] . push ( registers [ source ] ) ;  <NL> break ;  <NL> case pop :  <NL> registers [ source ] = stack [ active stack ] . pop ( ) ;  <NL> break ;  <NL>  }  <NL>  }  COM: <s> performs all unary operations </s>