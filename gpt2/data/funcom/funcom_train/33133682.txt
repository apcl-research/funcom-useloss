TDAT: public void dereference ( a resolver < ? super t > l ) {  <NL> switch ( state ) {  <NL> case unresolved :  <NL> if ( first listener = = null ) {  <NL> first listener = l ;  <NL>  } else {  <NL> if ( listeners = = null )  <NL> listeners = new linked list < a resolver < ? super t > > ( ) ;  <NL> listeners . add last ( l ) ;  <NL>  }  <NL> break ;  <NL> case resolved :  <NL> try {  <NL> l . resolve ( value ( ) ) ;  <NL>  } catch ( throwable t ) {  <NL> log . log ( java . util . logging . level . severe ,  <NL>  " promise listener thrown an error " , t ) ;  <NL>  }  <NL> break ;  <NL> case smashed :  <NL> try {  <NL> l . smash ( promise . this . problem ( ) ) ;  <NL>  } catch ( throwable t ) {  <NL> log . log ( java . util . logging . level . severe ,  <NL>  " promise listener thrown an error " , t ) ;  <NL>  }  <NL> break ;  <NL> default :  <NL> throw new illegal state exception ( " promise is in unknown state : "  <NL>  + state ) ;  <NL>  }  <NL>  }  COM: <s> register resolver for the promise </s>