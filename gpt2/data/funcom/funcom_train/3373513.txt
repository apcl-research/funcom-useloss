TDAT: public string parse dtd markup ( ) throws io exception {  <NL>  <NL> string buffer str buff = new string buffer ( ) ;  <NL> ch = read ch ( ) ;  <NL> while ( true ) {  <NL> switch ( ch ) {  <NL> case ' > ' :  <NL> ch = read ch ( ) ;  <NL> return str buff . to string ( ) ;  <NL> case - 1 :  <NL> error ( " invalid . markup " ) ;  <NL> return str buff . to string ( ) ;  <NL> case ' \n ' :  <NL> ln + + ;  <NL> ch = read ch ( ) ;  <NL> lf count + + ;  <NL> break ;  <NL> case ' " ' :  <NL> ch = read ch ( ) ;  <NL> break ;  <NL> case ' \r ' :  <NL> ln + + ;  <NL> if ( ( ch = read ch ( ) ) = = ' \n ' ) {  <NL> ch = read ch ( ) ;  <NL> crlf count + + ;  <NL>  }  <NL> else {  <NL> cr count + + ;  <NL>  }  <NL> break ;  <NL> default :  <NL> str buff . append ( ( char ) ( ch & 0x ff ) ) ;  <NL> ch = read ch ( ) ;  <NL> break ;  <NL>  }  <NL>  }  <NL>  }  COM: <s> parses th document declaration type markup declaration </s>