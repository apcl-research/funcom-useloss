TDAT: public void token text ( terms kind , syntax role role , string text ) {  <NL> final default lexer lexer = new default lexer ( ) ;  <NL> lexer . reparse ( " local : " , new string reader ( text ) , text pos . start ,  <NL> lexer states . default _ state ) ;  <NL> lexer . advance ( ) ;  <NL> token key key = lexer . current ( ) . key ( ) ;  <NL> switch ( key . kind ( ) ) {  <NL> case string :  <NL> case integer _ with _ suffix :  <NL> case float _ with _ suffix :  <NL> case identifier :  <NL> case integer :  <NL> case float :  <NL> case graphics :  <NL> case close _ round :  <NL> case close _ square :  <NL> case open _ round :  <NL> case open _ square :  <NL> case comma :  <NL> break ;  <NL> default :  <NL> throw new illegal argument exception ( " unexpected token kind : "  <NL>  + lexer . current ( ) . key ( ) + " for value : "  <NL>  + lexer . current ( ) . text ( ) ) ;  <NL>  }  <NL> token ( kind , role , key , text ) ;  <NL>  }  COM: <s> create node that matches specified text </s>