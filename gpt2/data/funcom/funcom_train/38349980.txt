TDAT: public validation result validate ( ) {  <NL> processor processor = new processor ( ) ;  <NL> processor . set security policy ( this . security policy ) ;  <NL> processor . set environment ( this . environment ) ;  <NL> validation result validation = this . validate ( processor ) ;  <NL> if ( ! validation . is valid ( ) ) {  <NL> string message = " rule engine state is invalid . " ;  <NL> iterator itr = validation . get messages ( ) . iterator ( ) ;  <NL> while ( itr . has next ( ) ) {  <NL> message + = " " + ( ( validation message ) itr . next ( ) ) . get message ( ) ;  <NL>  }  <NL> throw new runtime rule exception ( message ) ;  <NL>  }  <NL> return validation ;  <NL>  }  COM: <s> validates the current state of the rule engine </s>