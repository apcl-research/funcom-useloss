TDAT: public object visit ( multiply assign expression node ) {  <NL> node left = node . get left expression ( ) ;  <NL> left hand side modifier mod = node properties . get modifier ( left ) ;  <NL> object lhs = mod . prepare ( this , context ) ;  <NL>  <NL>  / / perform the operation <NL> object result = interpreter utilities . multiply <NL>  ( node properties . get type ( node ) ,  <NL> lhs ,  <NL> node . get right expression ( ) . accept visitor ( this ) ) ;  <NL>  <NL>  / / cast the result <NL> result = perform cast ( node properties . get type ( left ) , result ) ;  <NL>  <NL>  / / modify the variable and return <NL> mod . modify ( context , result ) ;  <NL> return result ;  <NL>  }  COM: <s> visits an multiply assign expression </s>