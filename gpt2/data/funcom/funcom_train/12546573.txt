TDAT: public automaton convert to automaton ( grammar grammar ) {  <NL> array list list = new array list ( ) ;  <NL> automaton automaton = new automaton ( ) ;  <NL> create states for conversion ( grammar , automaton ) ;  <NL> production [ ] productions = grammar . get productions ( ) ;  <NL> for ( int k = 0 ; k < productions . length ; k + + ) {  <NL> list . add ( get transition for production ( productions [ k ] ) ) ;  <NL>  }  <NL>  <NL> iterator it = list . iterator ( ) ;  <NL> while ( it . has next ( ) ) {  <NL> transition transition = ( transition ) it . next ( ) ;  <NL> automaton . add transition ( transition ) ;  <NL>  }  <NL> return automaton ;  <NL>  }  COM: <s> returns an automaton that is equivalent to code grammar code in that </s>