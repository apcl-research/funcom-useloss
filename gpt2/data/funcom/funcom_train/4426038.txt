TDAT: public s exp read ( ) {  <NL> while ( pos < stream . length ) {  <NL> char x = stream [ pos + + ] ;  <NL> switch ( x ) {  <NL> case ' ' :  <NL> case ' \t ' :  <NL> case ' \r ' :  <NL> case ' \n ' :  <NL>  / / ignore whitespace <NL> continue ;  <NL>  <NL> case ' ; ' :  <NL> skip comment ( ) ;  <NL> break ;  <NL>  <NL> case ' ( ' :  <NL> return read list ( x ) ;  <NL>  <NL> case ' " ' :  <NL> return read string ( ) ;  <NL>  <NL> case ' \\ ' :  <NL> return read token single escape ( ) ;  <NL>  <NL> case ' | ' :  <NL> throw new unsupported operation exception (  <NL>  " multiple escape not yet implemented " ) ;  <NL>  <NL> default :  <NL> if ( is constituent ( x ) ) {  <NL> return read token ( x ) ;  <NL>  } else {  <NL> throw new illegal state exception ( " unexpected character " + x ) ;  <NL>  }  <NL>  }  <NL>  }  <NL> return null ;  <NL>  }  COM: <s> reads an s expression from the stream </s>