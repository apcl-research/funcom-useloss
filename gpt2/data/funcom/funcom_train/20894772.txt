TDAT: private expression create or eq expression ( set dests ) {  <NL> iterator it = dests . iterator ( ) ;  <NL> if ( ! it . has next ( ) )  <NL> throw new runtime exception ( " no elements for an or expression " ) ;  <NL> state st = ( state ) it . next ( ) ;  <NL> expression e = new expression (  <NL> expression . eq ,  <NL> mode ,  <NL> new expression ( get real state name ( st . to string ( ) ) ) ) ;  <NL> while ( it . has next ( ) ) {  <NL> st = ( state ) it . next ( ) ;  <NL> e = new expression (  <NL> expression . or ,  <NL> e ,  <NL> new expression (  <NL> expression . eq ,  <NL> mode ,  <NL> new expression ( get real state name ( st . to string ( ) ) ) ) ) ;  <NL>  }  <NL> return e ;  <NL>  }  COM: <s> the method takes a set of states and constructs an </s>