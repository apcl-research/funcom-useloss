TDAT: protected void multiply top and bottom ( final base number factor ) {  <NL>  / / no need to check is mutable ( it should have been checked already )  <NL> try {  <NL> ensure numerator arithmutable ( ) ;  <NL> if ( ! factor . is exact ( ) ) {  <NL> ensure numerator fuzzy ( ) ;  <NL> ensure denominator fuzzy ( ) ;  <NL>  }  <NL>  ( ( arithmutable ) _ numerator ) . multiply ( factor ) ;  <NL> ensure denominator arithmutable ( ) ;  <NL>  ( ( arithmutable ) get denominator ( ) ) . multiply ( factor ) ;  <NL>  } catch ( final math exception ex ) {  <NL> throw new rational exception ( " multiply top and bottom ( base number ) : unexpected exception : " + ex ) ;  <NL>  }  <NL>  / / do not normalize <NL>  / / do not reset the identifier <NL>  }  COM: <s> mutating method to multiply the top and bottom of a rational equally </s>