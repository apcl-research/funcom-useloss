TDAT: public tree type ( type t ) {  <NL> if ( t = = null )  <NL> return null ;  <NL> tree tp ;  <NL> switch ( t . tag ) {  <NL> case byte :  <NL>  <NL> case char :  <NL>  <NL> case short :  <NL>  <NL> case int :  <NL>  <NL> case long :  <NL>  <NL> case float :  <NL>  <NL> case double :  <NL>  <NL> case boolean :  <NL>  <NL> case void :  <NL> tp = type ident ( t . tag ) ;  <NL> break ;  <NL>  <NL> case class :  <NL> type outer = t . outer ( ) ;  <NL> tree clazz = outer . tag = = class & & t . tsym . owner . kind = = typ ? select (  <NL> type ( outer ) , t . tsym )  <NL>  : qual ident ( t . tsym ) ;  <NL> tp = clazz ;  <NL> break ;  <NL>  <NL> case array :  <NL> tp = type array ( type ( t . elemtype ( ) ) ) ;  <NL> break ;  <NL>  <NL> case error :  <NL> tp = type ident ( error ) ;  <NL> break ;  <NL>  <NL> default :  <NL> throw new assertion error ( " unexpected type : " + t ) ;  <NL>  <NL>  }  <NL> return tp . set type ( t ) ;  <NL>  }  COM: <s> create a tree representing given type </s>