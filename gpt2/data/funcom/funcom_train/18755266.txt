TDAT: public void remove node ( node node ) {  <NL>  / / avoid concurrent modification :  <NL> list links to delete = new linked list ( ) ;  <NL> iterator i = nodes ( ) ;  <NL> while ( i . has next ( ) ) {  <NL> node from = ( node ) i . next ( ) ;  <NL> iterator j = from . links ( ) ;  <NL> while ( j . has next ( ) ) {  <NL> link l = ( link ) j . next ( ) ;  <NL> if ( l . get to ( ) . equals ( node ) ) {  <NL> links to delete . add ( l ) ;  <NL>  }  <NL>  }  <NL>  }  <NL> i = links to delete . iterator ( ) ;  <NL> while ( i . has next ( ) ) {  <NL> link l = ( link ) i . next ( ) ;  <NL> l . get from ( ) . remove link ( l ) ;  <NL>  }  <NL> node . set parent ( null ) ;  <NL> all nodes . remove ( node ) ;  <NL> fire structure changed ( ) ;  <NL>  }  COM: <s> removes a node and all incident links </s>