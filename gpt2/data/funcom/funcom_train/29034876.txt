TDAT: public string to string ( ) {  <NL> string buffer out = new string buffer ( this . get class ( ) . get name ( ) ) ;  <NL> out . append ( " : \n\tcode : " ) ;  <NL> out . append ( get fault code ( ) ) ;  <NL> out . append ( " \n " ) ;  <NL> for ( int i = 0 ; i < fault sub codes . size ( ) ; i + + ) {  <NL> out . append ( " \tsubcode : " ) ;  <NL> out . append ( fault sub codes . element at ( i ) ) ;  <NL> out . append ( " \n " ) ;  <NL>  }  <NL> enumeration langs = this . get reason languages ( ) ;  <NL> while ( langs . has more elements ( ) ) {  <NL> string lang = ( string ) langs . next element ( ) ;  <NL> out . append ( " \treason ( " ) ;  <NL> out . append ( lang ) ;  <NL> out . append ( " ) : " ) ;  <NL> out . append ( this . get reason ( lang ) ) ;  <NL> out . append ( " \n " ) ;  <NL>  }  <NL>  / / todo details <NL> return out . to string ( ) ;  <NL>  }  COM: <s> returns a string dump of this exception </s>