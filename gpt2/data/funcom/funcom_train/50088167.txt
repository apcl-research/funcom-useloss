TDAT: public list vertex list ( ) {  <NL> list vertices = new array list ( edge set ( ) . size ( ) ) ;  <NL>  <NL> object start vertex = vertex set ( ) . iterator ( ) . next ( ) ;  <NL>  <NL> object vertex = start vertex ;  <NL> object previous vertex = null ;  <NL> object next vertex = null ;  <NL>  <NL> while ( next vertex ! = start vertex ) {  <NL> vertices . add ( vertex ) ;  <NL>  <NL> edge edge = ( edge ) edges of ( vertex ) . get ( 0 ) ;  <NL> next vertex = edge . opposite vertex ( vertex ) ;  <NL>  <NL> if ( next vertex = = previous vertex ) {  <NL> edge = ( edge ) edges of ( vertex ) . get ( 1 ) ;  <NL> next vertex = edge . opposite vertex ( vertex ) ;  <NL>  }  <NL>  <NL> previous vertex = vertex ;  <NL> vertex = next vertex ;  <NL>  <NL>  }  <NL>  <NL>  <NL> return vertices ;  <NL>  }  COM: <s> returns a list of the vertices contained in this cycle </s>