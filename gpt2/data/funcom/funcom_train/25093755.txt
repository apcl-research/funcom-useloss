TDAT: protected abstract algorithm create inner algorithm ( ) {  <NL> abstract algorithm algo instance ;  <NL> try {  <NL> constructor < ? extends abstract algorithm > ctor ;  <NL> try {  <NL> ctor = inner algo class . get constructor ( transaction set . class , boolean . type ) ;  <NL> algo instance = ctor . new instance ( working gamma , is tight ( ) ) ;  <NL>  } catch ( no such method exception e1 ) {  <NL> ctor = inner algo class . get constructor ( transaction set . class ) ;  <NL> algo instance = ctor . new instance ( working gamma ) ;  <NL>  }  <NL>  } catch ( exception e ) {  <NL> e . print stack trace ( ) ;  <NL> throw new unsupported operation exception ( " can not instantiate " + inner algo class . get name ( ) ) ;  <NL>  }  <NL> return algo instance ;  <NL>  }  COM: <s> creates a instance of the given base algorithm inner algo class via reflection </s>