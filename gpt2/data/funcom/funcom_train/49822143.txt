TDAT: public solve info solve ( term query ) {  <NL> try {  <NL> query . resolve term ( ) ;  <NL>  <NL> library manager . on solve begin ( query ) ;  <NL> primitive manager . identify predicate ( query ) ;  <NL>  / / theory manager . trans begin ( ) ;  <NL>  <NL> freeze ( ) ;  <NL> if ( env ! = null )  <NL> env . cleanup ( ) ;  <NL> env = new engine ( this , query ) ;  <NL> state end result = env . run ( false ) ;  <NL> defreeze ( ) ;  <NL>  <NL> sinfo = new solve info (  <NL> env . query ,  <NL> result . get result goal ( ) ,  <NL> result . get result demo ( ) ,  <NL> result . get result vars ( )  <NL>  ) ;  <NL> if ( ! sinfo . has open alternatives ( ) ) solve end ( ) ;  <NL> return sinfo ;  <NL>  } catch ( exception ex ) {  <NL> ex . print stack trace ( ) ;  <NL> return new solve info ( query ) ;  <NL>  }  <NL>  }  COM: <s> solves a query </s>