TDAT: public static abstract class abstract node < k1 , v1 > implements node < k1 , v1 > {  <NL>  <NL>  / * *  <NL>  * < p > builds an instance . < / p >  <NL>  * /  <NL> protected abstract node ( ) {  <NL>  }  <NL>  <NL>  / * *  <NL>  * < p > merges a first node with a second node . < / p >  <NL>  *  <NL>  * @ param first the first node .  <NL>  * @ param second the second node .  <NL>  * @ return the result of the merge .  <NL>  * /  <NL> public node < k1 , v1 > merge ( node < k1 , v1 > first , node < k1 , v1 > second ) {  <NL> if ( first = = null )  <NL> return second ;  <NL> else if ( second = = null )  <NL> return first ;  <NL> else <NL> return first . merge ( second ) ;  <NL>  }  <NL>  }  COM: <s> p this is the base class of a pattern matching node </s>