TDAT: private string pretty print ( deductive argument node , set < deductive argument > visited nodes , int depth ) {  <NL> string s = " " ;  <NL> visited nodes . add ( node ) ;  <NL> for ( int i = 0 ; i < depth ; i + + )  <NL> s + = " - - " ;  <NL> s + = node . to string ( ) + " \n " ;  <NL> for ( deductive argument node2 : this . get neighbors ( node ) )  <NL> if ( ! visited nodes . contains ( node2 ) ) {  <NL> s + = this . pretty print ( node2 , new hash set < deductive argument > ( visited nodes ) , depth + 1 ) ;  <NL>  }  <NL> return s ;  <NL>  }  COM: <s> returns a string representation of the subtree rooted at </s>