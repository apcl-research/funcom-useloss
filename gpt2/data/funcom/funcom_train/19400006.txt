TDAT: protected abstract node get left sibling ( abstract node child , boolean materialize ) {  <NL>  <NL> int i = get index of ( child ) ;  <NL>  <NL> if ( i = = 0 ) {  <NL>  <NL>  / *  <NL>  * there is no left sibling for this child .  <NL>  * /  <NL> return null ;  <NL>  <NL>  } else {  <NL>  <NL> int index = i - 1 ;  <NL>  <NL> abstract node sibling = child refs [ index ] = = null ? null <NL>  : child refs [ index ] . get ( ) ;  <NL>  <NL> if ( sibling = = null ) {  <NL>  <NL> if ( materialize ) {  <NL>  <NL> sibling = get child ( index ) ;  <NL>  <NL>  }  <NL>  <NL>  } else {  <NL>  <NL> btree . touch ( sibling ) ;  <NL>  <NL>  }  <NL>  <NL> return sibling ;  <NL>  <NL>  }  <NL>  <NL>  }  COM: <s> return the left sibling </s>