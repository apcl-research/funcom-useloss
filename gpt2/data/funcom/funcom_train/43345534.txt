TDAT: public acl message dequeue ( agent identifier identifier ) {  <NL> i context worker ctx ;  <NL> synchronized ( this . contexts ) {  <NL> ctx = this . contexts . get ( identifier ) ;  <NL>  }  <NL> if ( ctx ! = null ) {  <NL> if ( this . messages . contains key ( identifier ) ) {  <NL> if ( this . messages . get ( identifier ) . size ( ) > 0 ) {  <NL> acl message poll = this . messages . get ( identifier ) . poll ( ) ;  <NL> this . lock . lock ( ) ;  <NL> try {  <NL> this . new messages . remove ( poll ) ;  <NL>  } finally {  <NL> this . lock . unlock ( ) ;  <NL>  }  <NL> if ( agent module . close _ message _ content . equals ( poll <NL>  . get content ( ) ) )  <NL> ctx . close ( ) ;  <NL> return poll ;  <NL>  }  <NL>  }  <NL>  }  <NL> return null ;  <NL>  }  COM: <s> manages the removal of a message from a given agent </s>