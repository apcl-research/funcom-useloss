TDAT: private void bet round ( int after ) {  <NL> int bettor = after ;  <NL> most recent raise = big blind ;  <NL> int bets = 0 ;  <NL>  <NL> if ( count ( state . needs _ to _ call ) < 2 & & stage ! = stage . preflop ) return ;  <NL>  <NL> while ( ( bettor = next ( state . needs _ to _ call , bettor ) ) ! = - 1 <NL>  & &  <NL>  ! ( count ( state . needs _ to _ call ) = = 1 & & ( count ( state . called ) + count ( state . allin ) ) = = 0 )  <NL>  ) { / / potential for an infinite loop <NL> this . handdata . start action ( this , bettor , bets + + ) ;  <NL>  <NL> int decision = players [ bettor ] . ai . get decision ( handdata ) ;  <NL> if ( decision < = fold ) {  <NL> decision = - 1 ;  <NL> fold ( bettor ) ;  <NL>  }  <NL>  <NL> else if ( decision = = call _ check ) call ( bettor ) ;  <NL> else decision = bet ( bettor , decision ) ;  <NL>  <NL> this . handdata . end action ( decision ) ;  <NL>  <NL>  <NL>  }  <NL>  <NL>  }  COM: <s> the set of betting rounds is preflop flop turn river </s>