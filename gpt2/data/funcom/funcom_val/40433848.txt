TDAT: public int cycle nb ( ) {  <NL> int cycle nb = 0 ;  <NL> for ( labeled node n : this . get nodes ( ) ) {  <NL> list < labeled node > neighbours = adj labeled nodes to list ( get target nodes ( n ) ) ;  <NL> set < labeled node > visited = new hash set < labeled node > ( ) ;  <NL>  <NL> while ( neighbours . size ( ) > 0 ) {  <NL> labeled node neighbour = neighbours . remove ( 0 ) ;  <NL> if ( neighbour = = n ) {  <NL> cycle nb + + ;  <NL> break ;  <NL>  }  <NL> if ( ! visited . contains ( neighbour ) ) {  <NL> neighbours . add all ( adj labeled nodes to list ( get target nodes ( neighbour ) ) ) ;  <NL> visited . add ( neighbour ) ;  <NL>  }  <NL>  }  <NL>  <NL>  }  <NL> return cycle nb ;  <NL>  }  COM: <s> returns the number of cycles of the graph </s>