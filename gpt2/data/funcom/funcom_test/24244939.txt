TDAT: public void run ( ) {  <NL>  / / keep running until the program should exit .  <NL> do {  <NL>  / / quiesce <NL> while ( state ! = start & & subsumption1 . main . running ) {  <NL> yield ( ) ;  <NL>  }  <NL>  <NL>  / / execute the fsm until it stops . . .  <NL> do {  <NL> int to sleep for ;  <NL>  <NL> synchronized ( subsumption1 . main ) {  <NL> to sleep for = actions [ state ] . act ( ) ;  <NL> state = fsm [ state ] ;  <NL>  }  <NL> if ( to sleep for > 0 ) {  <NL> try {  <NL> sleep ( to sleep for ) ;  <NL>  } catch ( interrupted exception ie ) {  <NL>  }  <NL>  }  <NL> else <NL> yield ( ) ;  <NL>  } while ( state ! = end & & subsumption1 . main . running ) ;  <NL>  <NL>  / / its over , release the actuators .  <NL> release ( ) ;  <NL>  } while ( subsumption1 . main . running ) ;  <NL>  }  COM: <s> the thread entry point </s>