TDAT: public string to text ( text node node ) {  <NL> int startpos ;  <NL> int endpos ;  <NL> string s ;  <NL> char c ;  <NL> string buffer ret ;  <NL>  <NL> startpos = node . get start position ( ) ;  <NL> endpos = node . get end position ( ) ;  <NL> ret = new string buffer ( endpos - startpos + 20 ) ;  <NL> s = node . to html ( ) ;  <NL> for ( int i = 0 ; i < s . length ( ) ; i + + ) {  <NL> c = s . char at ( i ) ;  <NL> switch ( c ) {  <NL> case ' \t ' :  <NL> ret . append ( " \\t " ) ;  <NL> break ;  <NL> case ' \n ' :  <NL> ret . append ( " \\n " ) ;  <NL> break ;  <NL> case ' \r ' :  <NL> ret . append ( " \\r " ) ;  <NL> break ;  <NL> default :  <NL> ret . append ( c ) ;  <NL>  }  <NL> if ( 77 < = ret . length ( ) ) {  <NL> ret . append ( " . . . " ) ;  <NL> break ;  <NL>  }  <NL>  }  <NL>  <NL> return ( ret . to string ( ) ) ;  <NL>  }  COM: <s> express this string node as a printable string this is suitable for </s>