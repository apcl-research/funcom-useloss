TDAT: private boolean derived from boolean ( type type , formula factory ff ) {  <NL> if ( type . equals ( ff . make boolean type ( ) ) )  <NL> return true ;  <NL> final type base type = type . get base type ( ) ;  <NL> if ( base type ! = null )  <NL> return derived from boolean ( base type , ff ) ;  <NL> if ( type instanceof product type ) {  <NL> final product type product type = ( product type ) type ;  <NL> return derived from boolean ( product type . get left ( ) , ff )  <NL>  & & derived from boolean ( product type . get right ( ) , ff ) ;  <NL>  }  <NL> return false ;  <NL>  }  COM: <s> returns code true code if the given type is composed from boolean </s>